# Code Refactoring


> The term **refactoring** is a disciplined technique for restructuring an existing body of code, altering its internal structure without changing its external behavior.
>
> Its heart is a series of small behavior preserving transformations. Each transformation (called a “refactoring”) does little, but a sequence of these transformations can produce a significant restructuring. Since each refactoring is small, it's less likely to go wrong. The system is kept fully working after each refactoring, reducing the chances that a system can get seriously broken during the restructuring. - [Martin Fowler](https://refactoring.com/)

The important part of the concept of refactoring is that we change the structure of the code, without changing its behavior. In other words, the code is supposed to do the same thing before and after the restructuring, but the new structure makes the code more maintainable, performant, and extensible.




::: {.equation #eq:simple-equation}
$$
\frac{x+2}{3x+6} = \frac{1\cancel{(x+2)}}{3\cancel{(x+2)}} = \frac{1}{3}
$$

<p style="text-align: center; display: block; margin-top: 10px;">
*Example of simplifying a mathematical equation, using a refactoring approach.*
</p>
:::

In practice, refactoring includes a process of simplifying an application's source code with the goal of removing duplication. When removing duplication during the refactoring process, developers strive to adhere to the **"DRY" principle**, which stands for "Don't Repeat Yourself". In other words, a certain concept should be represented in only one place, and future efforts to update the concept should only be done in one place.


## Benefits of Refactoring

Refactoring is a critical component of the software quality assurance and quality control process.

Refactoring offers numerous business and technical advantages, including cost savings, better software performance (i.e. time savings), and a more robust development lifecycle. Below are some of the core benefits:

  + Improved Maintainability
  + Enhanced Code Readability
  + Higher Code Quality
  + Increased Extensibility
  + Reduced Complexity

### Code Maintainability

Maintaining software over time becomes significantly easier when the code is refactored. Refactoring eliminates duplicate code, simplifies structure, and organizes logic more coherently. This reduces the need to update the same logic in multiple places, cutting down maintenance efforts and reducing the risk of introducing bugs during updates.

  + Lower Maintenance Costs: Simplified code requires less effort to understand and modify.
  + Faster Bug Fixing: Clearer code paths make it easier to identify and address issues.


### Code Readability

Readable code is crucial for effective collaboration among development teams, especially when working on large or long-term projects. Refactoring ensures that code is more intuitive, adheres to consistent naming conventions, and follows logical flow, making it easier for developers to understand.

  + Consistent Codebase: A well-organized codebase with clear structure promotes team collaboration and speeds up onboarding of new developers.
  + Reduced Cognitive Load: Simplified code reduces the mental effort required to comprehend complex logic.


### Code Quality

Code quality directly impacts the stability and reliability of a system. Refactoring improves code quality by removing redundancy, addressing poor design decisions, and adhering to modern coding standards. This, in turn, decreases the likelihood of defects or regressions in future updates.

  + Fewer Bugs: Clean, refactored code is less error-prone and easier to test.
  + More Reliable Systems: Systems built on high-quality code tend to be more stable and less prone to breaking.

### Code Extensibility

As software evolves, new features and functionalities are often required. Refactoring makes code more flexible and adaptable to change, allowing developers to add new features without having to rewrite large portions of the codebase.

  + Single Point of Change: Refactoring centralizes logic, so future changes only need to be made in one place rather than across multiple duplicated instances.
  + Scalability: A modular, well-structured codebase can handle growing user bases and increased system demands more easily.


### Code Complexity

Complex codebases are harder to manage, maintain, and debug. Refactoring reduces both **time complexity** (the number of operations required to perform a task) and **space complexity** (the amount of memory required to perform a task). This not only improves runtime performance but also enhances the system's ability to scale efficiently.

  + Better Performance: Reducing unnecessary computations or memory usage leads to faster and more efficient code execution.
  + Easier Debugging: With fewer nested operations and convoluted logic paths, it’s easier to trace and resolve issues.



## When to Refactor

Even though refactoring is beneficial, refactoring too early in the development process is a cardinal sin, and hard to recover from. Poorly refactored code, with the wrong separation of responsibilities, is harder to maintain and extend than code that has not yet been refactored.

You should first focus on writing code to achieve desired functionality before turning your focus to refactoring the code you have written. The code you have written, through presence of duplicate terms, will tell you the answers about how to refactor.

  + In general, if you find yourself writing the same or similar code two or three times during the development process, consider refactoring at that time.

  + Or if you need to make an update to your code and find the need to make the same update in multiple places, consider refactoring at that time.

  + Often, you will also find yourself refactoring the code in order to test it.


Tools like the [Code Climate](https://codeclimate.com/quality/) platform can perform automated assessments of code complexity, helping you identify opportunities to refactor:


## How to Refactor

Start by writing all your code on the left margin, so it executes from top to bottom.  Ensure that the code performs as desired.

Then look for instances of duplication. Removing duplication and simplifying terms can help adhere to the DRY Principle.


### Removing Duplication

Before refactoring:

```python
print("--------------------")
print("MY MESSAGE")
print("--------------------")

print("--------------------")
print("MY MESSAGE")
print("--------------------")

print("--------------------")
print("MY MESSAGE")
print("--------------------")
```

After refactoring:

```python
def print_message():
    print("--------------------")
    print("MY MESSAGE")
    print("--------------------")

print_message()

print_message()

print_message()
```

### Simplifying Terms

Before refactoring:

```python
print("--------------------")
print("FIRST HEADING")
print("--------------------")

print("--------------------")
print("SECOND HEADING")
print("--------------------")

print("--------------------")
print("THIRD HEADING")
print("--------------------")
```

After refactoring:

```python
def print_message(message):
    print("--------------------")
    print(message)
    print("--------------------")

print_message("FIRST HEADING")

print_message("SECOND HEADING")

print_message("THIRD HEADING")
```

### Enabling Testing

To test an application, we need to refactor it into smaller components that can be run and tested in isolation. This generally involves the usage of custom functions and custom classes.

We will delve into automated testing in much more detail in a future workshop.
